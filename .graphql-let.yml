# "plugins", required. The plugins for GraphQL documents to run GraphQL code
# generator with. Please note that you need to generate a TypeScript source here.
# See here for more information. https://graphql-code-generator.com/docs/plugins/index
# Example:
plugins:
  - typescript
  - typescript-operations
  - typescript-react-apollo
  - add:
      content: "/* eslint-disable */"

documents:
  - '**/*.graphql'
  - '!hasura/**'

schema: 'graphql.schema.json'

config:
  withComponent: false
  withHOC: false
  withHooks: true

# "respectGitIgnore", optional. `true` by default.
# If true, graphql-let will ignore files in .gitignore.
# Useful to prevent parsing files in such as `node_modules`.
#respectGitIgnore: true

# "cacheDir", optional. `node_modules/graphql-let/__generated__` by default.
# graphql-let takes care of intermediate `.ts(x)`s that GraphQL code generator
# generates, but we still need to write them on the disk for caching and
# TypeScript API purposes. This is the directory we store them to.
# Examples:
#cacheDir: __generated__

# "TSConfigFile", optional. `tsconfig.json` by default.
# You can specify a custom config for generating `.d.ts`s.
# Examples:
#TSConfigFile: tsconfig.json

# "gqlDtsEntrypoint", optional.
# `node_modules/@types/graphql-let/index.d.ts` by default. Needs to end with ".d.ts".
# Used as an entrypoint and directory of generated type declarations for `gql()` calls.
#gqlDtsEntrypoint: node_modules/@types/graphql-let/index.d.ts

# "schemaEntrypoint", optional. You need this if you want to use Resolver Types.
# Since you could point to multiple schemas, this path is
# used to generate `.d.ts` to generate `*.graphqls.d.ts`. If you do this,
#
#   schema: **/*.graphqls
#   schemaEntrypoint: schema.graphqls
#
# you can import the generated resolver types like below.
#
#   import { Resolvers } from '../schema.graphqls'
#
# It doesn't matter if the file of the path exists. I recommend
# you to specify a normal relative path without glob symbols (`**`) like this.
#schemaEntrypoint: hasura/schema.graphqls
