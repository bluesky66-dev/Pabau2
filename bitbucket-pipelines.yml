# Bitbucket Pipeline definition

image: node:14-buster

options:
  max-time: 45 # max time in minutes for each step

definitions:
  caches:
    nodemodules: 'node_modules/'
    yarncustom: '/usr/local/share/.cache/yarn'
    cypress: '/root/.cache/Cypress'
#  services:
#    docker:
#      memory: 2048

pipelines:
  pull-requests:
    '**':
      - step:
          name: PR pipeline
          caches:
            - nodemodules
            - yarncustom
          script:

            # Get an oauth access token using the client credentials, parsing out the token with jq.
            - apt-get update && apt-get install -y curl jq
            - >
              export access_token=$(curl -s -X POST -u "${BITBUCKET_CLIENT_ID}:${BITBUCKET_CLIENT_SECRET}" \
                https://bitbucket.org/site/oauth2/access_token \
                -d grant_type=client_credentials -d scopes="pullrequest"| jq --raw-output '.access_token')

            # Configure git to use the oauth token.
            - >
              curl -sS -H "Authorization: Bearer ${access_token}" "https://api.bitbucket.org/2.0/repositories/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}/pullrequests/${BITBUCKET_PR_ID}"
            - >
              export PR_AUTHOR=$(curl -sS -H "Authorization: Bearer ${access_token}" "https://api.bitbucket.org/2.0/repositories/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}/pullrequests/${BITBUCKET_PR_ID}" | jq -r '.author.display_name')

            - touch /tmp/bot_message.txt
            - yarn install --frozen-lockfile --prefer-offline

            # TODO: move these to eslint so that `yarn lint` picks up these errors instead
            - npm i -g typescript
            - tsc --noEmit -p apps/backend/
            - tsc --noEmit -p apps/connect/
            - tsc --noEmit -p apps/connect-e2e/
            - tsc --noEmit -p apps/mgmt/
            - tsc --noEmit -p apps/mgmt-e2e/
            - tsc --noEmit -p apps/ui-e2e/
            - tsc --noEmit -p apps/web/
            - tsc --noEmit -p apps/web-e2e/
            - tsc --noEmit -p libs/ui/tsconfig.lib.json
            - tsc --noEmit -p libs/yup/tsconfig.lib.json

            - yarn affected --base=origin/master --target=lint --with-deps --parallel
            - yarn affected --base=origin/master --target=test --parallel
            - yarn affected --base=origin/master --target=export --prod
            - yarn affected --base=origin/master --target=deploy
            - cat /tmp/bot_message.txt


  branches:
    master:

#        - step:
#            size: 2x
#            name: e2e
#            caches:
#              - cypress
#            script:
#              - yarn install --frozen-lockfile --prefer-offline
#              - apt update -y && apt install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
#              - yarn cypress install || true
#              - yarn affected:e2e --base=HEAD~1

      - step:
          name: test (lint+unit), build, deploy
          deployment: Production
          caches:
            - nodemodules
          script:
            - touch /tmp/bot_message.txt
            - yarn install --frozen-lockfile --prefer-offline

            - yarn affected:lint --base=HEAD~1 --with-deps --parallel
            - yarn affected:test --base=HEAD~1 --parallel

            # get the commit message for this merge
            - export LAST_COMMIT_LOG=$(git log HEAD -1 | tail -n +4 | perl -p -e 's/[\r\n]//' | awk '{$1=$1;print}')
            - echo "${LAST_COMMIT_LOG}"
            - if [ "${LAST_COMMIT_LOG}" == "[skip ci] bumping version (patch)" ]; then (echo yes && export LAST_COMMIT_LOG=$(git log HEAD~1 -1 | tail -n +4)); fi
            - echo "${LAST_COMMIT_LOG}"

            # Get an oauth access token using the client credentials, parsing out the token with jq.
            - apt-get update && apt-get install -y curl jq && jq --version && curl --version
            - git remote set-url origin "${BITBUCKET_GIT_SSH_ORIGIN}"

            # bump the package.json version by 0.0.1
            - yarn version --message "[skip ci] bumping version (patch)" --patch --non-interactive --no-progress
            - git push && git push --tags
            - export PACKAGE_JSON_VERSION=$(jq -r .version < package.json)

            - yarn affected --base=HEAD~2 --head=HEAD~1 --target=export --prod
            - yarn affected --base=HEAD~2 --head=HEAD~1 --target=build-storybook --prod
            - yarn affected --base=HEAD~2 --head=HEAD~1 --target=deploy --prod

            # Post to Slack
            - |
              jq --arg var "$(cat /tmp/bot_message.txt)" '.blocks[0].text.text = $var' tools/cicd/slack_notification.json | curl -0 "${SLACK_HOOK_URL}" \
              -H "Expect:" \
              -H 'Content-Type: application/json; charset=utf-8' \
              --data-binary @-

