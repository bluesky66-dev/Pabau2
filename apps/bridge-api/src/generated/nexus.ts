/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */
/* eslint-disable */

import { Context } from './../context'

declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    // @ts-ignore
    crud: NexusPrisma<TypeName, 'crud'>
    // @ts-ignore
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  // @ts-ignore
  type NexusGen = NexusGenTypes
}

export interface NexusGenInputs {
  adminWhereUniqueInput: {
    // input type
    id?: number | null // Int
    slug?: string | null // String
  }
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Query: {}
  admin: {
    // root type
    creation_date: NexusGenScalars['DateTime'] // DateTime!
    digit8: number // Int!
    id: number // Int!
    image: string // String!
    slug?: string | null // String
    user: string // String!
  }
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: {
    // field return type
    admin: NexusGenRootTypes['admin'] | null // admin
    admins: NexusGenRootTypes['admin'][] // [admin!]!
  }
  admin: {
    // field return type
    creation_date: NexusGenScalars['DateTime'] // DateTime!
    digit8: number // Int!
    id: number // Int!
    image: string // String!
    slug: string | null // String
    user: string // String!
  }
}

export interface NexusGenFieldTypeNames {
  Query: {
    // field return type name
    admin: 'admin'
    admins: 'admin'
  }
  admin: {
    // field return type name
    creation_date: 'DateTime'
    digit8: 'Int'
    id: 'Int'
    image: 'String'
    slug: 'String'
    user: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    admin: {
      // args
      where: NexusGenInputs['adminWhereUniqueInput'] // adminWhereUniqueInput!
    }
    admins: {
      // args
      after?: NexusGenInputs['adminWhereUniqueInput'] | null // adminWhereUniqueInput
      before?: NexusGenInputs['adminWhereUniqueInput'] | null // adminWhereUniqueInput
      first?: number | null // Int
      last?: number | null // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects

export type NexusGenInputNames = keyof NexusGenInputs

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = keyof NexusGenScalars

export type NexusGenUnionNames = never

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never

export type NexusGenAbstractsUsingStrategyResolveType = never

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  fieldTypeNames: NexusGenFieldTypeNames
  allTypes: NexusGenAllTypes
  typeInterfaces: NexusGenTypeInterfaces
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractTypeMembers: NexusGenAbstractTypeMembers
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType
  features: NexusGenFeaturesConfig
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
